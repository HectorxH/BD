import pyodbc
import pandas as pd
from random import random, choice
from math import ceil
import datetime

connect_string = """DRIVER={Oracle in OraDB12Home1};
DBQ=testing;
Uid=admin;
Pwd=pass"""

cnxn = pyodbc.connect(connect_string)
cnxn.add_output_converter(pyodbc.SQL_TYPE_TIMESTAMP, lambda x: str(x.decode("utf-8")))

def create_poyo():
    """Creates the table POYO from the data provided in the file pokemon.csv
    """
    df = pd.read_csv('pokemon.csv', usecols=["#","Name","Type 1", "Type 2", "HP","Legendary"])

    sql = '''--sql
    CREATE TABLE POYO
    (
        pokedex int,
        poke_name varchar2(50) NOT NULL PRIMARY KEY,
        type1 varchar2(50),
        type2 varchar2(50),
        hp_max int,
        legendary number(1) NOT NULL CHECK (legendary in (1, 0))
    );
    '''

    with cnxn.cursor() as cursor:
        try:
            cursor.execute(sql)
            print("POYO successfully created.")
        except:
            print("POYO is already a table.")
            return

        insert = '''--sql
        INSERT INTO POYO (pokedex, poke_name, type1, type2, hp_max, legendary)
            VALUES (?, ?, ?, ?, ?, ?);
        '''

        for _, row in df.iterrows():
            cursor.execute(insert, *row)

def random_hp(max_hp):
    """Calculates a random hp value given a max hp.

    Args:
        max_hp (int): max hp of the pokemon.

    Returns:
        int: the random hp.
    """
    return ceil(random()*int(max_hp))

def random_debuff():
    """Returns a random debuff from the possible debuffs, can raturn NULL.

    Returns:
        str or None: A random debuff.
    """
    debuffs = ['ENVENENADO', 'PARALIZADO', 'QUEMADO', 'DORMIDO', 'CONGELADO', 'NONE']
    return choice(debuffs)


def create_sansanito():
    """Creates the table SANSANITO.
    """
    sql = '''--sql
    CREATE TABLE SANSANITO (
        id int GENERATED BY DEFAULT AS IDENTITY,
        poke_name varchar2(50) REFERENCES poyo (poke_name),
        type1 varchar2(50),
        type2 varchar2(50),
        hp_curr int,
        hp_max int,
        debuff varchar2(50) CHECK (debuff in ('ENVENENADO', 'PARALIZADO', 'QUEMADO', 'DORMIDO', 'CONGELADO', 'NONE')),
        legendary number(1) NOT NULL CHECK (legendary in (1, 0)),
        check_in_time timestamp(2) default LOCALTIMESTAMP,
        preference int
    );
    '''

    with cnxn.cursor() as cursor:
        try:
            cursor.execute(sql)
            print("SANSANITO successfully created.")
        except:
            print("SANSANITO is already a table.")
            return

def populate_random(n=25):
    random_row = '''--sql
    SELECT * FROM (
        SELECT * FROM poyo ORDER BY dbms_random.value) WHERE rownum = 1;
    '''
    insert = '''--sql
    INSERT INTO sansanito (poke_name, type1, type2, hp_curr, hp_max, debuff, legendary, preference)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?);
    '''

    with cnxn.cursor() as cursor:
        for i in range(n):
            row = cursor.execute(random_row).fetchone()

            hp_max = row.HP_MAX
            hp = random_hp(hp_max)
            debuff = random_debuff()
            preference = hp_max - hp;
            if debuff != 'NONE':
                preference += 10


            cursor.execute(insert,
                row.POKE_NAME,
                row.TYPE1,
                row.TYPE2,
                hp, 
                hp_max,
                random_debuff(),
                row.LEGENDARY,
                preference
            )


def drop_all():
    """Drops all the tables.
    """
    cursor = cnxn.cursor()
    drop_cursor = cnxn.cursor()
    cursor.execute('SELECT table_name FROM user_tables;')

    for row in cursor:
        sql = "DROP TABLE {} CASCADE CONSTRAINTS;".format(row.TABLE_NAME)

        drop_cursor.execute(sql)
        print("Table {} successfully deleted.".format(row.TABLE_NAME))

    cnxn.commit()


def print_full_table(table_name, size=25):
    """Prints all rows and all columns from a given table in batches of size elements.

    Args:
        table_name (str): Target table.
        size (int, optional): Size of the batches. Defaults to 25.
    """
    table_name = table_name.upper()
    with cnxn.cursor() as cursor:
        cursor.execute("SELECT column_name FROM USER_TAB_COLUMNS WHERE table_name = ?;", table_name)
        cols = [col.COLUMN_NAME for col in cursor]

        cursor.execute("SELECT * FROM {};".format(table_name))
        rows = cursor.fetchmany(size)
        while rows:
            rows = [cols]+rows
            max_lens = [0] * len(cols)
            for row in rows:
                for i, value in enumerate(row):
                    max_lens[i] = max(max_lens[i], len(str(value)))
            
            row_format = ''.join("{:<"+str(max_lens[i]+2)+"}" for i in range(len(cols)))

            print('', *[row_format.format(*row) for row in rows] , '', sep='\n')

            rows = cursor.fetchmany(size)

print("""
     _____                             _ _        
    /  ___|                           (_) |       
    \ `--.  __ _ _ __  ___  __ _ _ __  _| |_ ___  
     `--. \/ _` | '_ \/ __|/ _` | '_ \| | __/ _ \ 
    /\__/ / (_| | | | \__ \ (_| | | | | | || (_) |
    \____/ \__,_|_| |_|___/\__,_|_| |_|_|\__\___/ """)

print("""    _.----.        ____         ,'  _\   ___    ___     ____
_,-'       `.     |    |  /`.   \,-'    |   \  /   |   |    \  |`.
\      __    \    '-.  | /   `.  ___    |    \/    |   '-.   \ |  |
 \.    \ \   |  __  |  |/    ,','_  `.  |          | __  |    \|  |
   \    \/   /,' _`.|      ,' / / / /   |          ,' _`.|     |  |
    \     ,-'/  /   \    ,'   | \/ / ,`.|         /  /   \  |     |
     \    \ |   \_/  |   `-.  \    `'  /|  |    ||   \_/  | |\    |
      \    \ \      /       `-.`.___,-' |  |\  /| \      /  | |   |
       \    \ `.__,'|  |`-._    `|      |__| \/ |  `.__,'|  | |   |
        \_.-'       |__|    `-._ |              '-.|     '-.| |   |
                                `'                            '-._|""")
print("======================================================================")